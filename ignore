local function startAutoParry()
	local UserInputService = game:GetService("UserInputService")
	local replicatedStorage = game:GetService("ReplicatedStorage")
	local heartbeatConnection
	local players = game:GetService("Players")
	local localPlayer = players.LocalPlayer
	local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
	local ballsFolder = workspace:WaitForChild("Balls")
	local parryButtonPress = replicatedStorage.Remotes.ParryButtonPress
	local abilityButtonPress = replicatedStorage.Remotes.AbilityButtonPress
	local UseRage = false
	
	local function onCharacterAdded(newCharacter)
		character = newCharacter
	end
	localPlayer.CharacterAdded:Connect(onCharacterAdded)

	local function chooseNewFocusedBall()
		local balls = ballsFolder:GetChildren()
		local bestBall = nil
		local bestDistance = math.huge

		for _, ball in ipairs(balls) do
			if ball:GetAttribute("realBall") ~= nil and ball:GetAttribute("realBall") == true then
				local distance = (ball.Position - character.HumanoidRootPart.Position).Magnitude
				if distance < bestDistance then
					bestBall = ball
					bestDistance = distance
				end
			elseif ball:GetAttribute("target") ~= nil then
				local distance = (ball.Position - character.HumanoidRootPart.Position).Magnitude
				if distance < bestDistance then
					bestBall = ball
					bestDistance = distance
				end
			end
		end

		focusedBall = bestBall
	end

	if character then
		chooseNewFocusedBall()

		local SAFE_DISTANCE = 15
		local BASE_THRESHOLD = 0.15
		local VELOCITY_SCALING_FACTOR_FAST = 0.050
		local VELOCITY_SCALING_FACTOR_SLOW = 0.1

		local function getDynamicThreshold(ballVelocityMagnitude)
			if ballVelocityMagnitude > 60 then
				return math.max(0.20, BASE_THRESHOLD - (ballVelocityMagnitude * VELOCITY_SCALING_FACTOR_FAST))
			else
				return math.min(0.01, BASE_THRESHOLD + (ballVelocityMagnitude * VELOCITY_SCALING_FACTOR_SLOW))
			end
		end

		local function timeUntilImpact(ballVelocity, distanceToPlayer, playerVelocity)
			local directionToPlayer = (character.HumanoidRootPart.Position - focusedBall.Position).Unit
			local velocityTowardsPlayer = ballVelocity:Dot(directionToPlayer) - playerVelocity:Dot(directionToPlayer)

			if velocityTowardsPlayer <= 0 then
				return math.huge
			end

			return (distanceToPlayer - SAFE_DISTANCE) / velocityTowardsPlayer
		end

		local function isWalkSpeedZero()
			local humanoid = character:FindFirstChildOfClass("Humanoid")
			if humanoid then
				return humanoid.WalkSpeed == 0
			end
			return false
		end

		local function checkBallDistance()
			if not character or not character:FindFirstChild("Highlight") then return end

			local charPos = character.HumanoidRootPart.Position
			local charVel = character.HumanoidRootPart.Velocity

			if focusedBall and not focusedBall.Parent then
				chooseNewFocusedBall()
			end

			if not focusedBall then 
				chooseNewFocusedBall()
			end

			local ball = focusedBall
			local distanceToPlayer = (ball.Position - charPos).Magnitude
			local ballVelocityTowardsPlayer = ball.Velocity:Dot((charPos - ball.Position).Unit)

			if distanceToPlayer < SAFE_DISTANCE then
				-- Move o jogador para longe da bola
				local moveDirection = (charPos - ball.Position).Unit
				character:SetPrimaryPartCFrame(CFrame.new(charPos + moveDirection * SAFE_DISTANCE))
			end

			if distanceToPlayer < 10 then
				parryButtonPress:Fire()
			end

			local isCheckingRage = false

			if timeUntilImpact(ball.Velocity, distanceToPlayer, charVel) < getDynamicThreshold(ballVelocityTowardsPlayer) then
				if character.Abilities["Raging Deflection"].Enabled and UseRage == true then
					if not isCheckingRage then
						isCheckingRage = true
						abilityButtonPress:Fire()
						if not isWalkSpeedZero() then
							parryButtonPress:Fire()
						end
						isCheckingRage = false
					end
				else
					parryButtonPress:Fire()
				end
			end
		end

		heartbeatConnection = game:GetService("RunService").Heartbeat:Connect(function()
			checkBallDistance()
		end)
	else
		print("Character not found.")
		return
	end
end
print("v.8")
startAutoParry()
