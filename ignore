local replicatedStorage = game:GetService("ReplicatedStorage")
local parryButtonPress = replicatedStorage.Remotes.ParryButtonPress
local localPlayer = game:GetService("Players").LocalPlayer
local character = localPlayer.Character
local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")

local function calculateSpeed(previousPosition, currentPosition, deltaTime)
	return (currentPosition - previousPosition).Magnitude / deltaTime
end

local previousBallPosition = nil
local previousTimestamp = tick()
local initialDetectionRadius = 35
local minDetectionRadius = 35
local maxDetectionRadius = 40

print("v.3")
game:GetService("RunService").RenderStepped:Connect(function()
	wait()

	for _, ball in pairs(workspace.Balls:GetChildren()) do
		if ball and humanoidRootPart then
			if character:FindFirstChild("Highlight") and ball:GetAttribute("target") ~= nil then
				local currentBallPosition = ball.Position
				local currentTimestamp = tick()
				local deltaTime = currentTimestamp - previousTimestamp
				local ballSpeed = 0

				if previousBallPosition then
					ballSpeed = calculateSpeed(previousBallPosition, currentBallPosition, deltaTime)
				end

				-- Calcula o raio de detecção baseado na velocidade da bola
				local detectionRadius = initialDetectionRadius + ballSpeed * 2

				-- Limita o raio de detecção para garantir que esteja entre minDetectionRadius e maxDetectionRadius
				detectionRadius = math.clamp(detectionRadius, minDetectionRadius, maxDetectionRadius)

				-- Se a bola estiver dentro do raio de detecção, dispare o remote
				if (currentBallPosition - humanoidRootPart.Position).Magnitude <= detectionRadius then
					parryButtonPress:Fire()
				end

				previousBallPosition = currentBallPosition
				previousTimestamp = currentTimestamp
			end
		end
	end
end)
